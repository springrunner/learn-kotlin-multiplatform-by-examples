//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: order.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Coffeehouse_Contract_Order_OrderServiceClient`, then call methods of this protocol to make API calls.
public protocol Coffeehouse_Contract_Order_OrderServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol? { get }

  func placeOrder(
    _ request: Coffeehouse_Contract_Order_PlaceOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coffeehouse_Contract_Order_PlaceOrderRequest, Coffeehouse_Contract_Order_PlaceOrderResponse>
}

extension Coffeehouse_Contract_Order_OrderServiceClientProtocol {
  public var serviceName: String {
    return "coffeehouse.contract.order.OrderService"
  }

  /// Unary call to PlaceOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to PlaceOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func placeOrder(
    _ request: Coffeehouse_Contract_Order_PlaceOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coffeehouse_Contract_Order_PlaceOrderRequest, Coffeehouse_Contract_Order_PlaceOrderResponse> {
    return self.makeUnaryCall(
      path: Coffeehouse_Contract_Order_OrderServiceClientMetadata.Methods.placeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlaceOrderInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Coffeehouse_Contract_Order_OrderServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Coffeehouse_Contract_Order_OrderServiceNIOClient")
public final class Coffeehouse_Contract_Order_OrderServiceClient: Coffeehouse_Contract_Order_OrderServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the coffeehouse.contract.order.OrderService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Coffeehouse_Contract_Order_OrderServiceNIOClient: Coffeehouse_Contract_Order_OrderServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the coffeehouse.contract.order.OrderService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Coffeehouse_Contract_Order_OrderServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol? { get }

  func makePlaceOrderCall(
    _ request: Coffeehouse_Contract_Order_PlaceOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coffeehouse_Contract_Order_PlaceOrderRequest, Coffeehouse_Contract_Order_PlaceOrderResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coffeehouse_Contract_Order_OrderServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Coffeehouse_Contract_Order_OrderServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePlaceOrderCall(
    _ request: Coffeehouse_Contract_Order_PlaceOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coffeehouse_Contract_Order_PlaceOrderRequest, Coffeehouse_Contract_Order_PlaceOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Coffeehouse_Contract_Order_OrderServiceClientMetadata.Methods.placeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlaceOrderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coffeehouse_Contract_Order_OrderServiceAsyncClientProtocol {
  public func placeOrder(
    _ request: Coffeehouse_Contract_Order_PlaceOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coffeehouse_Contract_Order_PlaceOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Coffeehouse_Contract_Order_OrderServiceClientMetadata.Methods.placeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlaceOrderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Coffeehouse_Contract_Order_OrderServiceAsyncClient: Coffeehouse_Contract_Order_OrderServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Coffeehouse_Contract_Order_OrderServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'placeOrder'.
  func makePlaceOrderInterceptors() -> [ClientInterceptor<Coffeehouse_Contract_Order_PlaceOrderRequest, Coffeehouse_Contract_Order_PlaceOrderResponse>]
}

public enum Coffeehouse_Contract_Order_OrderServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "OrderService",
    fullName: "coffeehouse.contract.order.OrderService",
    methods: [
      Coffeehouse_Contract_Order_OrderServiceClientMetadata.Methods.placeOrder,
    ]
  )

  public enum Methods {
    public static let placeOrder = GRPCMethodDescriptor(
      name: "PlaceOrder",
      path: "/coffeehouse.contract.order.OrderService/PlaceOrder",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Coffeehouse_Contract_Order_OrderServiceProvider: CallHandlerProvider {
  var interceptors: Coffeehouse_Contract_Order_OrderServiceServerInterceptorFactoryProtocol? { get }

  func placeOrder(request: Coffeehouse_Contract_Order_PlaceOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coffeehouse_Contract_Order_PlaceOrderResponse>
}

extension Coffeehouse_Contract_Order_OrderServiceProvider {
  public var serviceName: Substring {
    return Coffeehouse_Contract_Order_OrderServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PlaceOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coffeehouse_Contract_Order_PlaceOrderRequest>(),
        responseSerializer: ProtobufSerializer<Coffeehouse_Contract_Order_PlaceOrderResponse>(),
        interceptors: self.interceptors?.makePlaceOrderInterceptors() ?? [],
        userFunction: self.placeOrder(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Coffeehouse_Contract_Order_OrderServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coffeehouse_Contract_Order_OrderServiceServerInterceptorFactoryProtocol? { get }

  func placeOrder(
    request: Coffeehouse_Contract_Order_PlaceOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coffeehouse_Contract_Order_PlaceOrderResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coffeehouse_Contract_Order_OrderServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Coffeehouse_Contract_Order_OrderServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Coffeehouse_Contract_Order_OrderServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Coffeehouse_Contract_Order_OrderServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PlaceOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coffeehouse_Contract_Order_PlaceOrderRequest>(),
        responseSerializer: ProtobufSerializer<Coffeehouse_Contract_Order_PlaceOrderResponse>(),
        interceptors: self.interceptors?.makePlaceOrderInterceptors() ?? [],
        wrapping: { try await self.placeOrder(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Coffeehouse_Contract_Order_OrderServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'placeOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlaceOrderInterceptors() -> [ServerInterceptor<Coffeehouse_Contract_Order_PlaceOrderRequest, Coffeehouse_Contract_Order_PlaceOrderResponse>]
}

public enum Coffeehouse_Contract_Order_OrderServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "OrderService",
    fullName: "coffeehouse.contract.order.OrderService",
    methods: [
      Coffeehouse_Contract_Order_OrderServiceServerMetadata.Methods.placeOrder,
    ]
  )

  public enum Methods {
    public static let placeOrder = GRPCMethodDescriptor(
      name: "PlaceOrder",
      path: "/coffeehouse.contract.order.OrderService/PlaceOrder",
      type: GRPCCallType.unary
    )
  }
}
